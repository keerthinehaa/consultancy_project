{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class Batches extends APIResource {\n  /**\r\n   * Creates and executes a batch from an uploaded file of requests.\r\n   * [Learn more](/docs/batch).\r\n   */\n  create(body, options) {\n    return this._client.post('/openai/v1/batches', {\n      body,\n      ...options\n    });\n  }\n  /**\r\n   * Retrieves a batch.\r\n   */\n  retrieve(batchId, options) {\n    return this._client.get(`/openai/v1/batches/${batchId}`, options);\n  }\n  /**\r\n   * List your organization's batches.\r\n   */\n  list(options) {\n    return this._client.get('/openai/v1/batches', options);\n  }\n  /**\r\n   * Cancels a batch.\r\n   */\n  cancel(batchId, options) {\n    return this._client.post(`/openai/v1/batches/${batchId}/cancel`, options);\n  }\n}","map":{"version":3,"names":["APIResource","Batches","create","body","options","_client","post","retrieve","batchId","get","list","cancel"],"sources":["D:\\consultancy_project\\consultancy_project\\client\\node_modules\\groq-sdk\\src\\resources\\batches.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../resource';\r\nimport * as Core from '../core';\r\n\r\nexport class Batches extends APIResource {\r\n  /**\r\n   * Creates and executes a batch from an uploaded file of requests.\r\n   * [Learn more](/docs/batch).\r\n   */\r\n  create(body: BatchCreateParams, options?: Core.RequestOptions): Core.APIPromise<BatchCreateResponse> {\r\n    return this._client.post('/openai/v1/batches', { body, ...options });\r\n  }\r\n\r\n  /**\r\n   * Retrieves a batch.\r\n   */\r\n  retrieve(batchId: string, options?: Core.RequestOptions): Core.APIPromise<BatchRetrieveResponse> {\r\n    return this._client.get(`/openai/v1/batches/${batchId}`, options);\r\n  }\r\n\r\n  /**\r\n   * List your organization's batches.\r\n   */\r\n  list(options?: Core.RequestOptions): Core.APIPromise<BatchListResponse> {\r\n    return this._client.get('/openai/v1/batches', options);\r\n  }\r\n\r\n  /**\r\n   * Cancels a batch.\r\n   */\r\n  cancel(batchId: string, options?: Core.RequestOptions): Core.APIPromise<BatchCancelResponse> {\r\n    return this._client.post(`/openai/v1/batches/${batchId}/cancel`, options);\r\n  }\r\n}\r\n\r\nexport interface BatchCreateResponse {\r\n  id: string;\r\n\r\n  /**\r\n   * The time frame within which the batch should be processed.\r\n   */\r\n  completion_window: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * The API endpoint used by the batch.\r\n   */\r\n  endpoint: string;\r\n\r\n  /**\r\n   * The ID of the input file for the batch.\r\n   */\r\n  input_file_id: string;\r\n\r\n  /**\r\n   * The object type, which is always `batch`.\r\n   */\r\n  object: 'batch';\r\n\r\n  /**\r\n   * The current status of the batch.\r\n   */\r\n  status:\r\n    | 'validating'\r\n    | 'failed'\r\n    | 'in_progress'\r\n    | 'finalizing'\r\n    | 'completed'\r\n    | 'expired'\r\n    | 'cancelling'\r\n    | 'cancelled';\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was cancelled.\r\n   */\r\n  cancelled_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started cancelling.\r\n   */\r\n  cancelling_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was completed.\r\n   */\r\n  completed_at?: number;\r\n\r\n  /**\r\n   * The ID of the file containing the outputs of requests with errors.\r\n   */\r\n  error_file_id?: string;\r\n\r\n  errors?: BatchCreateResponse.Errors;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch expired.\r\n   */\r\n  expired_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch will expire.\r\n   */\r\n  expires_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch failed.\r\n   */\r\n  failed_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started finalizing.\r\n   */\r\n  finalizing_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started processing.\r\n   */\r\n  in_progress_at?: number;\r\n\r\n  /**\r\n   * Set of key-value pairs that can be attached to an object. This can be useful for\r\n   * storing additional information about the object in a structured format.\r\n   */\r\n  metadata?: unknown | null;\r\n\r\n  /**\r\n   * The ID of the file containing the outputs of successfully executed requests.\r\n   */\r\n  output_file_id?: string;\r\n\r\n  /**\r\n   * The request counts for different statuses within the batch.\r\n   */\r\n  request_counts?: BatchCreateResponse.RequestCounts;\r\n}\r\n\r\nexport namespace BatchCreateResponse {\r\n  export interface Errors {\r\n    data?: Array<Errors.Data>;\r\n\r\n    /**\r\n     * The object type, which is always `list`.\r\n     */\r\n    object?: string;\r\n  }\r\n\r\n  export namespace Errors {\r\n    export interface Data {\r\n      /**\r\n       * An error code identifying the error type.\r\n       */\r\n      code?: string;\r\n\r\n      /**\r\n       * The line number of the input file where the error occurred, if applicable.\r\n       */\r\n      line?: number | null;\r\n\r\n      /**\r\n       * A human-readable message providing more details about the error.\r\n       */\r\n      message?: string;\r\n\r\n      /**\r\n       * The name of the parameter that caused the error, if applicable.\r\n       */\r\n      param?: string | null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The request counts for different statuses within the batch.\r\n   */\r\n  export interface RequestCounts {\r\n    /**\r\n     * Number of requests that have been completed successfully.\r\n     */\r\n    completed: number;\r\n\r\n    /**\r\n     * Number of requests that have failed.\r\n     */\r\n    failed: number;\r\n\r\n    /**\r\n     * Total number of requests in the batch.\r\n     */\r\n    total: number;\r\n  }\r\n}\r\n\r\nexport interface BatchRetrieveResponse {\r\n  id: string;\r\n\r\n  /**\r\n   * The time frame within which the batch should be processed.\r\n   */\r\n  completion_window: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * The API endpoint used by the batch.\r\n   */\r\n  endpoint: string;\r\n\r\n  /**\r\n   * The ID of the input file for the batch.\r\n   */\r\n  input_file_id: string;\r\n\r\n  /**\r\n   * The object type, which is always `batch`.\r\n   */\r\n  object: 'batch';\r\n\r\n  /**\r\n   * The current status of the batch.\r\n   */\r\n  status:\r\n    | 'validating'\r\n    | 'failed'\r\n    | 'in_progress'\r\n    | 'finalizing'\r\n    | 'completed'\r\n    | 'expired'\r\n    | 'cancelling'\r\n    | 'cancelled';\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was cancelled.\r\n   */\r\n  cancelled_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started cancelling.\r\n   */\r\n  cancelling_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was completed.\r\n   */\r\n  completed_at?: number;\r\n\r\n  /**\r\n   * The ID of the file containing the outputs of requests with errors.\r\n   */\r\n  error_file_id?: string;\r\n\r\n  errors?: BatchRetrieveResponse.Errors;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch expired.\r\n   */\r\n  expired_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch will expire.\r\n   */\r\n  expires_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch failed.\r\n   */\r\n  failed_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started finalizing.\r\n   */\r\n  finalizing_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started processing.\r\n   */\r\n  in_progress_at?: number;\r\n\r\n  /**\r\n   * Set of key-value pairs that can be attached to an object. This can be useful for\r\n   * storing additional information about the object in a structured format.\r\n   */\r\n  metadata?: unknown | null;\r\n\r\n  /**\r\n   * The ID of the file containing the outputs of successfully executed requests.\r\n   */\r\n  output_file_id?: string;\r\n\r\n  /**\r\n   * The request counts for different statuses within the batch.\r\n   */\r\n  request_counts?: BatchRetrieveResponse.RequestCounts;\r\n}\r\n\r\nexport namespace BatchRetrieveResponse {\r\n  export interface Errors {\r\n    data?: Array<Errors.Data>;\r\n\r\n    /**\r\n     * The object type, which is always `list`.\r\n     */\r\n    object?: string;\r\n  }\r\n\r\n  export namespace Errors {\r\n    export interface Data {\r\n      /**\r\n       * An error code identifying the error type.\r\n       */\r\n      code?: string;\r\n\r\n      /**\r\n       * The line number of the input file where the error occurred, if applicable.\r\n       */\r\n      line?: number | null;\r\n\r\n      /**\r\n       * A human-readable message providing more details about the error.\r\n       */\r\n      message?: string;\r\n\r\n      /**\r\n       * The name of the parameter that caused the error, if applicable.\r\n       */\r\n      param?: string | null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The request counts for different statuses within the batch.\r\n   */\r\n  export interface RequestCounts {\r\n    /**\r\n     * Number of requests that have been completed successfully.\r\n     */\r\n    completed: number;\r\n\r\n    /**\r\n     * Number of requests that have failed.\r\n     */\r\n    failed: number;\r\n\r\n    /**\r\n     * Total number of requests in the batch.\r\n     */\r\n    total: number;\r\n  }\r\n}\r\n\r\nexport interface BatchListResponse {\r\n  data: Array<BatchListResponse.Data>;\r\n\r\n  object: 'list';\r\n}\r\n\r\nexport namespace BatchListResponse {\r\n  export interface Data {\r\n    id: string;\r\n\r\n    /**\r\n     * The time frame within which the batch should be processed.\r\n     */\r\n    completion_window: string;\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch was created.\r\n     */\r\n    created_at: number;\r\n\r\n    /**\r\n     * The API endpoint used by the batch.\r\n     */\r\n    endpoint: string;\r\n\r\n    /**\r\n     * The ID of the input file for the batch.\r\n     */\r\n    input_file_id: string;\r\n\r\n    /**\r\n     * The object type, which is always `batch`.\r\n     */\r\n    object: 'batch';\r\n\r\n    /**\r\n     * The current status of the batch.\r\n     */\r\n    status:\r\n      | 'validating'\r\n      | 'failed'\r\n      | 'in_progress'\r\n      | 'finalizing'\r\n      | 'completed'\r\n      | 'expired'\r\n      | 'cancelling'\r\n      | 'cancelled';\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch was cancelled.\r\n     */\r\n    cancelled_at?: number;\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch started cancelling.\r\n     */\r\n    cancelling_at?: number;\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch was completed.\r\n     */\r\n    completed_at?: number;\r\n\r\n    /**\r\n     * The ID of the file containing the outputs of requests with errors.\r\n     */\r\n    error_file_id?: string;\r\n\r\n    errors?: Data.Errors;\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch expired.\r\n     */\r\n    expired_at?: number;\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch will expire.\r\n     */\r\n    expires_at?: number;\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch failed.\r\n     */\r\n    failed_at?: number;\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch started finalizing.\r\n     */\r\n    finalizing_at?: number;\r\n\r\n    /**\r\n     * The Unix timestamp (in seconds) for when the batch started processing.\r\n     */\r\n    in_progress_at?: number;\r\n\r\n    /**\r\n     * Set of key-value pairs that can be attached to an object. This can be useful for\r\n     * storing additional information about the object in a structured format.\r\n     */\r\n    metadata?: unknown | null;\r\n\r\n    /**\r\n     * The ID of the file containing the outputs of successfully executed requests.\r\n     */\r\n    output_file_id?: string;\r\n\r\n    /**\r\n     * The request counts for different statuses within the batch.\r\n     */\r\n    request_counts?: Data.RequestCounts;\r\n  }\r\n\r\n  export namespace Data {\r\n    export interface Errors {\r\n      data?: Array<Errors.Data>;\r\n\r\n      /**\r\n       * The object type, which is always `list`.\r\n       */\r\n      object?: string;\r\n    }\r\n\r\n    export namespace Errors {\r\n      export interface Data {\r\n        /**\r\n         * An error code identifying the error type.\r\n         */\r\n        code?: string;\r\n\r\n        /**\r\n         * The line number of the input file where the error occurred, if applicable.\r\n         */\r\n        line?: number | null;\r\n\r\n        /**\r\n         * A human-readable message providing more details about the error.\r\n         */\r\n        message?: string;\r\n\r\n        /**\r\n         * The name of the parameter that caused the error, if applicable.\r\n         */\r\n        param?: string | null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * The request counts for different statuses within the batch.\r\n     */\r\n    export interface RequestCounts {\r\n      /**\r\n       * Number of requests that have been completed successfully.\r\n       */\r\n      completed: number;\r\n\r\n      /**\r\n       * Number of requests that have failed.\r\n       */\r\n      failed: number;\r\n\r\n      /**\r\n       * Total number of requests in the batch.\r\n       */\r\n      total: number;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface BatchCancelResponse {\r\n  id: string;\r\n\r\n  /**\r\n   * The time frame within which the batch should be processed.\r\n   */\r\n  completion_window: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * The API endpoint used by the batch.\r\n   */\r\n  endpoint: string;\r\n\r\n  /**\r\n   * The ID of the input file for the batch.\r\n   */\r\n  input_file_id: string;\r\n\r\n  /**\r\n   * The object type, which is always `batch`.\r\n   */\r\n  object: 'batch';\r\n\r\n  /**\r\n   * The current status of the batch.\r\n   */\r\n  status:\r\n    | 'validating'\r\n    | 'failed'\r\n    | 'in_progress'\r\n    | 'finalizing'\r\n    | 'completed'\r\n    | 'expired'\r\n    | 'cancelling'\r\n    | 'cancelled';\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was cancelled.\r\n   */\r\n  cancelled_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started cancelling.\r\n   */\r\n  cancelling_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was completed.\r\n   */\r\n  completed_at?: number;\r\n\r\n  /**\r\n   * The ID of the file containing the outputs of requests with errors.\r\n   */\r\n  error_file_id?: string;\r\n\r\n  errors?: BatchCancelResponse.Errors;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch expired.\r\n   */\r\n  expired_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch will expire.\r\n   */\r\n  expires_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch failed.\r\n   */\r\n  failed_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started finalizing.\r\n   */\r\n  finalizing_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started processing.\r\n   */\r\n  in_progress_at?: number;\r\n\r\n  /**\r\n   * Set of key-value pairs that can be attached to an object. This can be useful for\r\n   * storing additional information about the object in a structured format.\r\n   */\r\n  metadata?: unknown | null;\r\n\r\n  /**\r\n   * The ID of the file containing the outputs of successfully executed requests.\r\n   */\r\n  output_file_id?: string;\r\n\r\n  /**\r\n   * The request counts for different statuses within the batch.\r\n   */\r\n  request_counts?: BatchCancelResponse.RequestCounts;\r\n}\r\n\r\nexport namespace BatchCancelResponse {\r\n  export interface Errors {\r\n    data?: Array<Errors.Data>;\r\n\r\n    /**\r\n     * The object type, which is always `list`.\r\n     */\r\n    object?: string;\r\n  }\r\n\r\n  export namespace Errors {\r\n    export interface Data {\r\n      /**\r\n       * An error code identifying the error type.\r\n       */\r\n      code?: string;\r\n\r\n      /**\r\n       * The line number of the input file where the error occurred, if applicable.\r\n       */\r\n      line?: number | null;\r\n\r\n      /**\r\n       * A human-readable message providing more details about the error.\r\n       */\r\n      message?: string;\r\n\r\n      /**\r\n       * The name of the parameter that caused the error, if applicable.\r\n       */\r\n      param?: string | null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The request counts for different statuses within the batch.\r\n   */\r\n  export interface RequestCounts {\r\n    /**\r\n     * Number of requests that have been completed successfully.\r\n     */\r\n    completed: number;\r\n\r\n    /**\r\n     * Number of requests that have failed.\r\n     */\r\n    failed: number;\r\n\r\n    /**\r\n     * Total number of requests in the batch.\r\n     */\r\n    total: number;\r\n  }\r\n}\r\n\r\nexport interface BatchCreateParams {\r\n  /**\r\n   * The time frame within which the batch should be processed. Durations from `24h`\r\n   * to `7d` are supported.\r\n   */\r\n  completion_window: string;\r\n\r\n  /**\r\n   * The endpoint to be used for all requests in the batch. Currently\r\n   * `/v1/chat/completions` is supported.\r\n   */\r\n  endpoint: '/v1/chat/completions';\r\n\r\n  /**\r\n   * The ID of an uploaded file that contains requests for the new batch.\r\n   *\r\n   * See [upload file](/docs/api-reference#files-upload) for how to upload a file.\r\n   *\r\n   * Your input file must be formatted as a [JSONL file](/docs/batch), and must be\r\n   * uploaded with the purpose `batch`. The file can be up to 100 MB in size.\r\n   */\r\n  input_file_id: string;\r\n\r\n  /**\r\n   * Optional custom metadata for the batch.\r\n   */\r\n  metadata?: Record<string, string> | null;\r\n}\r\n\r\nexport declare namespace Batches {\r\n  export {\r\n    type BatchCreateResponse as BatchCreateResponse,\r\n    type BatchRetrieveResponse as BatchRetrieveResponse,\r\n    type BatchListResponse as BatchListResponse,\r\n    type BatchCancelResponse as BatchCancelResponse,\r\n    type BatchCreateParams as BatchCreateParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;AAGtB,OAAM,MAAOC,OAAQ,SAAQD,WAAW;EACtC;;;;EAIAE,MAAMA,CAACC,IAAuB,EAAEC,OAA6B;IAC3D,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,oBAAoB,EAAE;MAAEH,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EACtE;EAEA;;;EAGAG,QAAQA,CAACC,OAAe,EAAEJ,OAA6B;IACrD,OAAO,IAAI,CAACC,OAAO,CAACI,GAAG,CAAC,sBAAsBD,OAAO,EAAE,EAAEJ,OAAO,CAAC;EACnE;EAEA;;;EAGAM,IAAIA,CAACN,OAA6B;IAChC,OAAO,IAAI,CAACC,OAAO,CAACI,GAAG,CAAC,oBAAoB,EAAEL,OAAO,CAAC;EACxD;EAEA;;;EAGAO,MAAMA,CAACH,OAAe,EAAEJ,OAA6B;IACnD,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,sBAAsBE,OAAO,SAAS,EAAEJ,OAAO,CAAC;EAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}