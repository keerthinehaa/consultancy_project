{"ast":null,"code":"import { MultipartBody } from \"./MultipartBody.mjs\";\nexport function getRuntime({\n  manuallyImported\n} = {}) {\n  const recommendation = manuallyImported ? `You may need to use polyfills` : `Add one of these imports before your first \\`import … from 'groq-sdk'\\`:\n- \\`import 'groq-sdk/shims/node'\\` (if you're running on Node)\n- \\`import 'groq-sdk/shims/web'\\` (otherwise)\n`;\n  let _fetch, _Request, _Response, _Headers;\n  try {\n    // @ts-ignore\n    _fetch = fetch;\n    // @ts-ignore\n    _Request = Request;\n    // @ts-ignore\n    _Response = Response;\n    // @ts-ignore\n    _Headers = Headers;\n  } catch (error) {\n    throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);\n  }\n  return {\n    kind: 'web',\n    fetch: _fetch,\n    Request: _Request,\n    Response: _Response,\n    Headers: _Headers,\n    FormData:\n    // @ts-ignore\n    typeof FormData !== 'undefined' ? FormData : class FormData {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);\n      }\n    },\n    Blob: typeof Blob !== 'undefined' ? Blob : class Blob {\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);\n      }\n    },\n    File:\n    // @ts-ignore\n    typeof File !== 'undefined' ? File : class File {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);\n      }\n    },\n    ReadableStream:\n    // @ts-ignore\n    typeof ReadableStream !== 'undefined' ? ReadableStream : class ReadableStream {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);\n      }\n    },\n    getMultipartRequestOptions: async (\n    // @ts-ignore\n    form, opts) => ({\n      ...opts,\n      body: new MultipartBody(form)\n    }),\n    getDefaultAgent: url => undefined,\n    fileFromPath: () => {\n      throw new Error('The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/groq/groq-typescript#file-uploads');\n    },\n    isFsReadStream: value => false\n  };\n}","map":{"version":3,"names":["MultipartBody","getRuntime","manuallyImported","recommendation","_fetch","_Request","_Response","_Headers","fetch","Request","Response","Headers","error","Error","message","kind","FormData","constructor","Blob","File","ReadableStream","getMultipartRequestOptions","form","opts","body","getDefaultAgent","url","undefined","fileFromPath","isFsReadStream","value"],"sources":["D:\\consultancy_project\\consultancy_project\\client\\node_modules\\groq-sdk\\src\\_shims\\web-runtime.ts"],"sourcesContent":["/**\r\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\r\n */\r\nimport { MultipartBody } from './MultipartBody';\r\nimport { type RequestOptions } from '../core';\r\nimport { type Shims } from './registry';\r\n\r\nexport function getRuntime({ manuallyImported }: { manuallyImported?: boolean } = {}): Shims {\r\n  const recommendation =\r\n    manuallyImported ?\r\n      `You may need to use polyfills`\r\n    : `Add one of these imports before your first \\`import … from 'groq-sdk'\\`:\r\n- \\`import 'groq-sdk/shims/node'\\` (if you're running on Node)\r\n- \\`import 'groq-sdk/shims/web'\\` (otherwise)\r\n`;\r\n\r\n  let _fetch, _Request, _Response, _Headers;\r\n  try {\r\n    // @ts-ignore\r\n    _fetch = fetch;\r\n    // @ts-ignore\r\n    _Request = Request;\r\n    // @ts-ignore\r\n    _Response = Response;\r\n    // @ts-ignore\r\n    _Headers = Headers;\r\n  } catch (error) {\r\n    throw new Error(\r\n      `this environment is missing the following Web Fetch API type: ${\r\n        (error as any).message\r\n      }. ${recommendation}`,\r\n    );\r\n  }\r\n\r\n  return {\r\n    kind: 'web',\r\n    fetch: _fetch,\r\n    Request: _Request,\r\n    Response: _Response,\r\n    Headers: _Headers,\r\n    FormData:\r\n      // @ts-ignore\r\n      typeof FormData !== 'undefined' ? FormData : (\r\n        class FormData {\r\n          // @ts-ignore\r\n          constructor() {\r\n            throw new Error(\r\n              `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`,\r\n            );\r\n          }\r\n        }\r\n      ),\r\n    Blob:\r\n      typeof Blob !== 'undefined' ? Blob : (\r\n        class Blob {\r\n          constructor() {\r\n            throw new Error(\r\n              `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`,\r\n            );\r\n          }\r\n        }\r\n      ),\r\n    File:\r\n      // @ts-ignore\r\n      typeof File !== 'undefined' ? File : (\r\n        class File {\r\n          // @ts-ignore\r\n          constructor() {\r\n            throw new Error(\r\n              `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`,\r\n            );\r\n          }\r\n        }\r\n      ),\r\n    ReadableStream:\r\n      // @ts-ignore\r\n      typeof ReadableStream !== 'undefined' ? ReadableStream : (\r\n        class ReadableStream {\r\n          // @ts-ignore\r\n          constructor() {\r\n            throw new Error(\r\n              `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`,\r\n            );\r\n          }\r\n        }\r\n      ),\r\n    getMultipartRequestOptions: async <T = Record<string, unknown>>(\r\n      // @ts-ignore\r\n      form: FormData,\r\n      opts: RequestOptions<T>,\r\n    ): Promise<RequestOptions<T>> => ({\r\n      ...opts,\r\n      body: new MultipartBody(form) as any,\r\n    }),\r\n    getDefaultAgent: (url: string) => undefined,\r\n    fileFromPath: () => {\r\n      throw new Error(\r\n        'The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/groq/groq-typescript#file-uploads',\r\n      );\r\n    },\r\n    isFsReadStream: (value: any) => false,\r\n  };\r\n}\r\n"],"mappings":"SAGSA,aAAa,QAAE;AAIxB,OAAM,SAAUC,UAAUA,CAAC;EAAEC;AAAgB,IAAqC,EAAE;EAClF,MAAMC,cAAc,GAClBD,gBAAgB,GACd,+BAA+B,GAC/B;;;CAGL;EAEC,IAAIE,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ;EACzC,IAAI;IACF;IACAH,MAAM,GAAGI,KAAK;IACd;IACAH,QAAQ,GAAGI,OAAO;IAClB;IACAH,SAAS,GAAGI,QAAQ;IACpB;IACAH,QAAQ,GAAGI,OAAO;GACnB,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CACb,iEACGD,KAAa,CAACE,OACjB,KAAKX,cAAc,EAAE,CACtB;;EAGH,OAAO;IACLY,IAAI,EAAE,KAAK;IACXP,KAAK,EAAEJ,MAAM;IACbK,OAAO,EAAEJ,QAAQ;IACjBK,QAAQ,EAAEJ,SAAS;IACnBK,OAAO,EAAEJ,QAAQ;IACjBS,QAAQ;IACN;IACA,OAAOA,QAAQ,KAAK,WAAW,GAAGA,QAAQ,GACxC,MAAMA,QAAQ;MACZ;MACAC,YAAA;QACE,MAAM,IAAIJ,KAAK,CACb,qFAAqFV,cAAc,EAAE,CACtG;MACH;KAEH;IACHe,IAAI,EACF,OAAOA,IAAI,KAAK,WAAW,GAAGA,IAAI,GAChC,MAAMA,IAAI;MACRD,YAAA;QACE,MAAM,IAAIJ,KAAK,CACb,iFAAiFV,cAAc,EAAE,CAClG;MACH;KAEH;IACHgB,IAAI;IACF;IACA,OAAOA,IAAI,KAAK,WAAW,GAAGA,IAAI,GAChC,MAAMA,IAAI;MACR;MACAF,YAAA;QACE,MAAM,IAAIJ,KAAK,CACb,iFAAiFV,cAAc,EAAE,CAClG;MACH;KAEH;IACHiB,cAAc;IACZ;IACA,OAAOA,cAAc,KAAK,WAAW,GAAGA,cAAc,GACpD,MAAMA,cAAc;MAClB;MACAH,YAAA;QACE,MAAM,IAAIJ,KAAK,CACb,uFAAuFV,cAAc,EAAE,CACxG;MACH;KAEH;IACHkB,0BAA0B,EAAE,MAAAA;IAC1B;IACAC,IAAc,EACdC,IAAuB,MACS;MAChC,GAAGA,IAAI;MACPC,IAAI,EAAE,IAAIxB,aAAa,CAACsB,IAAI;KAC7B,CAAC;IACFG,eAAe,EAAGC,GAAW,IAAKC,SAAS;IAC3CC,YAAY,EAAEA,CAAA,KAAK;MACjB,MAAM,IAAIf,KAAK,CACb,kJAAkJ,CACnJ;IACH,CAAC;IACDgB,cAAc,EAAGC,KAAU,IAAK;GACjC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}