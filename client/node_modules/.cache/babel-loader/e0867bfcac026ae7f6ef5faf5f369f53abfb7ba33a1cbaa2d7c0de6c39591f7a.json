{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as Core from \"../../core.mjs\";\nexport class Translations extends APIResource {\n  /**\r\n   * Translates audio into English.\r\n   */\n  create(body, options) {\n    return this._client.post('/openai/v1/audio/translations', Core.multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n}","map":{"version":3,"names":["APIResource","Core","Translations","create","body","options","_client","post","multipartFormRequestOptions"],"sources":["D:\\consultancy_project\\consultancy_project\\client\\node_modules\\groq-sdk\\src\\resources\\audio\\translations.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../resource';\r\nimport * as Core from '../../core';\r\n\r\nexport class Translations extends APIResource {\r\n  /**\r\n   * Translates audio into English.\r\n   */\r\n  create(body: TranslationCreateParams, options?: Core.RequestOptions): Core.APIPromise<Translation> {\r\n    return this._client.post(\r\n      '/openai/v1/audio/translations',\r\n      Core.multipartFormRequestOptions({ body, ...options }),\r\n    );\r\n  }\r\n}\r\n\r\nexport interface Translation {\r\n  text: string;\r\n}\r\n\r\nexport interface TranslationCreateParams {\r\n  /**\r\n   * ID of the model to use. Only `whisper-large-v3` is currently available.\r\n   */\r\n  model: (string & {}) | 'whisper-large-v3';\r\n\r\n  /**\r\n   * The audio file object (not file name) translate, in one of these formats: flac,\r\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\r\n   */\r\n  file?: Core.Uploadable;\r\n\r\n  /**\r\n   * An optional text to guide the model's style or continue a previous audio\r\n   * segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in\r\n   * English.\r\n   */\r\n  prompt?: string;\r\n\r\n  /**\r\n   * The format of the transcript output, in one of these options: `json`, `text`, or\r\n   * `verbose_json`.\r\n   */\r\n  response_format?: 'json' | 'text' | 'verbose_json';\r\n\r\n  /**\r\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\r\n   * output more random, while lower values like 0.2 will make it more focused and\r\n   * deterministic. If set to 0, the model will use\r\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\r\n   * automatically increase the temperature until certain thresholds are hit.\r\n   */\r\n  temperature?: number;\r\n\r\n  /**\r\n   * The audio URL to translate/transcribe (supports Base64URL). Either file or url\r\n   * must be provided. When using the Batch API only url is supported.\r\n   */\r\n  url?: string;\r\n}\r\n\r\nexport declare namespace Translations {\r\n  export { type Translation as Translation, type TranslationCreateParams as TranslationCreateParams };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;OACf,KAAKC,IAAI;AAEhB,OAAM,MAAOC,YAAa,SAAQF,WAAW;EAC3C;;;EAGAG,MAAMA,CAACC,IAA6B,EAAEC,OAA6B;IACjE,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CACtB,+BAA+B,EAC/BN,IAAI,CAACO,2BAA2B,CAAC;MAAEJ,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC,CACvD;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}