{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nexport class Completions extends APIResource {\n  create(body, options) {\n    return this._client.post('/openai/v1/chat/completions', {\n      body,\n      ...options,\n      stream: body.stream ?? false\n    });\n  }\n}","map":{"version":3,"names":["APIResource","Completions","create","body","options","_client","post","stream"],"sources":["D:\\consultancy_project\\consultancy_project\\client\\node_modules\\groq-sdk\\src\\resources\\chat\\completions.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../resource';\r\nimport * as Core from '../../core';\r\nimport * as ChatCompletionsAPI from './completions';\r\nimport * as CompletionsAPI from '../completions';\r\nimport * as Shared from '../shared';\r\nimport { Stream } from '../../lib/streaming';\r\n\r\nexport class Completions extends APIResource {\r\n  /**\r\n   * Creates a model response for the given chat conversation.\r\n   */\r\n  create(\r\n    body: ChatCompletionCreateParamsNonStreaming,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<ChatCompletion>;\r\n  create(\r\n    body: ChatCompletionCreateParamsStreaming,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<Stream<ChatCompletionChunk>>;\r\n  create(\r\n    body: ChatCompletionCreateParamsBase,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>;\r\n  create(\r\n    body: ChatCompletionCreateParams,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<ChatCompletion> | Core.APIPromise<Stream<ChatCompletionChunk>> {\r\n    return this._client.post('/openai/v1/chat/completions', {\r\n      body,\r\n      ...options,\r\n      stream: body.stream ?? false,\r\n    }) as Core.APIPromise<ChatCompletion> | Core.APIPromise<Stream<ChatCompletionChunk>>;\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a chat completion response returned by model, based on the provided\r\n * input.\r\n */\r\nexport interface ChatCompletion {\r\n  /**\r\n   * A unique identifier for the chat completion.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * A list of chat completion choices. Can be more than one if `n` is greater\r\n   * than 1.\r\n   */\r\n  choices: Array<ChatCompletion.Choice>;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) of when the chat completion was created.\r\n   */\r\n  created: number;\r\n\r\n  /**\r\n   * The model used for the chat completion.\r\n   */\r\n  model: string;\r\n\r\n  /**\r\n   * The object type, which is always `chat.completion`.\r\n   */\r\n  object: 'chat.completion';\r\n\r\n  /**\r\n   * This fingerprint represents the backend configuration that the model runs with.\r\n   *\r\n   * Can be used in conjunction with the `seed` request parameter to understand when\r\n   * backend changes have been made that might impact determinism.\r\n   */\r\n  system_fingerprint?: string;\r\n\r\n  /**\r\n   * Usage statistics for the completion request.\r\n   */\r\n  usage?: CompletionsAPI.CompletionUsage;\r\n\r\n  /**\r\n   * Detailed usage breakdown by model when multiple models are used in the request\r\n   * for compound AI systems.\r\n   */\r\n  usage_breakdown?: ChatCompletion.UsageBreakdown;\r\n}\r\n\r\nexport namespace ChatCompletion {\r\n  export interface Choice {\r\n    /**\r\n     * The reason the model stopped generating tokens. This will be `stop` if the model\r\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\r\n     * number of tokens specified in the request was reached, `tool_calls` if the model\r\n     * called a tool, or `function_call` (deprecated) if the model called a function.\r\n     */\r\n    finish_reason: 'stop' | 'length' | 'tool_calls' | 'function_call';\r\n\r\n    /**\r\n     * The index of the choice in the list of choices.\r\n     */\r\n    index: number;\r\n\r\n    /**\r\n     * Log probability information for the choice.\r\n     */\r\n    logprobs: Choice.Logprobs | null;\r\n\r\n    /**\r\n     * A chat completion message generated by the model.\r\n     */\r\n    message: ChatCompletionsAPI.ChatCompletionMessage;\r\n  }\r\n\r\n  export namespace Choice {\r\n    /**\r\n     * Log probability information for the choice.\r\n     */\r\n    export interface Logprobs {\r\n      /**\r\n       * A list of message content tokens with log probability information.\r\n       */\r\n      content: Array<ChatCompletionsAPI.ChatCompletionTokenLogprob> | null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detailed usage breakdown by model when multiple models are used in the request\r\n   * for compound AI systems.\r\n   */\r\n  export interface UsageBreakdown {\r\n    /**\r\n     * List of models used in the request and their individual usage statistics\r\n     */\r\n    models: Array<UsageBreakdown.Model>;\r\n  }\r\n\r\n  export namespace UsageBreakdown {\r\n    export interface Model {\r\n      /**\r\n       * The name/identifier of the model used\r\n       */\r\n      model: string;\r\n\r\n      /**\r\n       * Usage statistics for the completion request.\r\n       */\r\n      usage: CompletionsAPI.CompletionUsage;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ChatCompletionAssistantMessageParam {\r\n  /**\r\n   * The role of the messages author, in this case `assistant`.\r\n   */\r\n  role: 'assistant';\r\n\r\n  /**\r\n   * The contents of the assistant message. Required unless `tool_calls` or\r\n   * `function_call` is specified.\r\n   */\r\n  content?: string | null;\r\n\r\n  /**\r\n   * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\r\n   * function that should be called, as generated by the model.\r\n   */\r\n  function_call?: ChatCompletionAssistantMessageParam.FunctionCall;\r\n\r\n  /**\r\n   * An optional name for the participant. Provides the model information to\r\n   * differentiate between participants of the same role.\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * The tool calls generated by the model, such as function calls.\r\n   */\r\n  tool_calls?: Array<ChatCompletionMessageToolCall>;\r\n}\r\n\r\nexport namespace ChatCompletionAssistantMessageParam {\r\n  /**\r\n   * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\r\n   * function that should be called, as generated by the model.\r\n   */\r\n  export interface FunctionCall {\r\n    /**\r\n     * The arguments to call the function with, as generated by the model in JSON\r\n     * format. Note that the model does not always generate valid JSON, and may\r\n     * hallucinate parameters not defined by your function schema. Validate the\r\n     * arguments in your code before calling your function.\r\n     */\r\n    arguments?: string;\r\n\r\n    /**\r\n     * The name of the function to call.\r\n     */\r\n    name?: string;\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a streamed chunk of a chat completion response returned by model,\r\n * based on the provided input.\r\n */\r\nexport interface ChatCompletionChunk {\r\n  /**\r\n   * A unique identifier for the chat completion. Each chunk has the same ID.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * A list of chat completion choices. Can contain more than one elements if `n` is\r\n   * greater than 1.\r\n   */\r\n  choices: Array<ChatCompletionChunk.Choice>;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) of when the chat completion was created. Each\r\n   * chunk has the same timestamp.\r\n   */\r\n  created: number;\r\n\r\n  /**\r\n   * The model to generate the completion.\r\n   */\r\n  model: string;\r\n\r\n  /**\r\n   * The object type, which is always `chat.completion.chunk`.\r\n   */\r\n  object: 'chat.completion.chunk';\r\n\r\n  /**\r\n   * This fingerprint represents the backend configuration that the model runs with.\r\n   * Can be used in conjunction with the `seed` request parameter to understand when\r\n   * backend changes have been made that might impact determinism.\r\n   */\r\n  system_fingerprint?: string;\r\n\r\n  x_groq?: ChatCompletionChunk.XGroq;\r\n}\r\n\r\nexport namespace ChatCompletionChunk {\r\n  export interface Choice {\r\n    /**\r\n     * A chat completion delta generated by streamed model responses.\r\n     */\r\n    delta: Choice.Delta;\r\n\r\n    /**\r\n     * The reason the model stopped generating tokens. This will be `stop` if the model\r\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\r\n     * number of tokens specified in the request was reached, `tool_calls` if the model\r\n     * called a tool, or `function_call` (deprecated) if the model called a function.\r\n     */\r\n    finish_reason: 'stop' | 'length' | 'tool_calls' | 'function_call' | null;\r\n\r\n    /**\r\n     * The index of the choice in the list of choices.\r\n     */\r\n    index: number;\r\n\r\n    /**\r\n     * Log probability information for the choice.\r\n     */\r\n    logprobs?: Choice.Logprobs | null;\r\n  }\r\n\r\n  export namespace Choice {\r\n    /**\r\n     * A chat completion delta generated by streamed model responses.\r\n     */\r\n    export interface Delta {\r\n      /**\r\n       * The contents of the chunk message.\r\n       */\r\n      content?: string | null;\r\n\r\n      /**\r\n       * A list of tools that were executed during the chat completion for compound AI\r\n       * systems.\r\n       */\r\n      executed_tools?: Array<Delta.ExecutedTool>;\r\n\r\n      /**\r\n       * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\r\n       * function that should be called, as generated by the model.\r\n       */\r\n      function_call?: Delta.FunctionCall;\r\n\r\n      /**\r\n       * The model's reasoning for a response. Only available for reasoning models when\r\n       * requests parameter reasoning_format has value `parsed.\r\n       */\r\n      reasoning?: string | null;\r\n\r\n      /**\r\n       * The role of the author of this message.\r\n       */\r\n      role?: 'system' | 'user' | 'assistant' | 'tool';\r\n\r\n      tool_calls?: Array<Delta.ToolCall>;\r\n    }\r\n\r\n    export namespace Delta {\r\n      export interface ExecutedTool {\r\n        /**\r\n         * The arguments passed to the tool in JSON format.\r\n         */\r\n        arguments: string;\r\n\r\n        /**\r\n         * The index of the executed tool.\r\n         */\r\n        index: number;\r\n\r\n        /**\r\n         * The type of tool that was executed.\r\n         */\r\n        type: string;\r\n\r\n        /**\r\n         * The output returned by the tool.\r\n         */\r\n        output?: string | null;\r\n      }\r\n\r\n      /**\r\n       * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\r\n       * function that should be called, as generated by the model.\r\n       */\r\n      export interface FunctionCall {\r\n        /**\r\n         * The arguments to call the function with, as generated by the model in JSON\r\n         * format. Note that the model does not always generate valid JSON, and may\r\n         * hallucinate parameters not defined by your function schema. Validate the\r\n         * arguments in your code before calling your function.\r\n         */\r\n        arguments?: string;\r\n\r\n        /**\r\n         * The name of the function to call.\r\n         */\r\n        name?: string;\r\n      }\r\n\r\n      export interface ToolCall {\r\n        index: number;\r\n\r\n        /**\r\n         * The ID of the tool call.\r\n         */\r\n        id?: string;\r\n\r\n        function?: ToolCall.Function;\r\n\r\n        /**\r\n         * The type of the tool. Currently, only `function` is supported.\r\n         */\r\n        type?: 'function';\r\n      }\r\n\r\n      export namespace ToolCall {\r\n        export interface Function {\r\n          /**\r\n           * The arguments to call the function with, as generated by the model in JSON\r\n           * format. Note that the model does not always generate valid JSON, and may\r\n           * hallucinate parameters not defined by your function schema. Validate the\r\n           * arguments in your code before calling your function.\r\n           */\r\n          arguments?: string;\r\n\r\n          /**\r\n           * The name of the function to call.\r\n           */\r\n          name?: string;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Log probability information for the choice.\r\n     */\r\n    export interface Logprobs {\r\n      /**\r\n       * A list of message content tokens with log probability information.\r\n       */\r\n      content: Array<ChatCompletionsAPI.ChatCompletionTokenLogprob> | null;\r\n    }\r\n  }\r\n\r\n  export interface XGroq {\r\n    /**\r\n     * A groq request ID which can be used by to refer to a specific request to groq\r\n     * support Only sent with the first chunk\r\n     */\r\n    id?: string;\r\n\r\n    /**\r\n     * An error string indicating why a stream was stopped early\r\n     */\r\n    error?: string;\r\n\r\n    /**\r\n     * Usage information for the stream. Only sent in the final chunk\r\n     */\r\n    usage?: CompletionsAPI.CompletionUsage;\r\n\r\n    /**\r\n     * Detailed usage breakdown by model when multiple models are used in the request\r\n     * for compound AI systems. Only sent in the final chunk\r\n     */\r\n    usage_breakdown?: XGroq.UsageBreakdown;\r\n  }\r\n\r\n  export namespace XGroq {\r\n    /**\r\n     * Detailed usage breakdown by model when multiple models are used in the request\r\n     * for compound AI systems. Only sent in the final chunk\r\n     */\r\n    export interface UsageBreakdown {\r\n      /**\r\n       * List of models used in the request and their individual usage statistics\r\n       */\r\n      models: Array<UsageBreakdown.Model>;\r\n    }\r\n\r\n    export namespace UsageBreakdown {\r\n      export interface Model {\r\n        /**\r\n         * The name/identifier of the model used\r\n         */\r\n        model: string;\r\n\r\n        /**\r\n         * Usage statistics for the completion request.\r\n         */\r\n        usage: CompletionsAPI.CompletionUsage;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport type ChatCompletionContentPart = ChatCompletionContentPartText | ChatCompletionContentPartImage;\r\n\r\nexport interface ChatCompletionContentPartImage {\r\n  image_url: ChatCompletionContentPartImage.ImageURL;\r\n\r\n  /**\r\n   * The type of the content part.\r\n   */\r\n  type: 'image_url';\r\n}\r\n\r\nexport namespace ChatCompletionContentPartImage {\r\n  export interface ImageURL {\r\n    /**\r\n     * Either a URL of the image or the base64 encoded image data.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Specifies the detail level of the image.\r\n     */\r\n    detail?: 'auto' | 'low' | 'high';\r\n  }\r\n}\r\n\r\nexport interface ChatCompletionContentPartText {\r\n  /**\r\n   * The text content.\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * The type of the content part.\r\n   */\r\n  type: 'text';\r\n}\r\n\r\n/**\r\n * Specifying a particular function via `{\"name\": \"my_function\"}` forces the model\r\n * to call that function.\r\n */\r\nexport interface ChatCompletionFunctionCallOption {\r\n  /**\r\n   * The name of the function to call.\r\n   */\r\n  name: string;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface ChatCompletionFunctionMessageParam {\r\n  /**\r\n   * The contents of the function message.\r\n   */\r\n  content: string | null;\r\n\r\n  /**\r\n   * The name of the function to call.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The role of the messages author, in this case `function`.\r\n   */\r\n  role: 'function';\r\n}\r\n\r\n/**\r\n * A chat completion message generated by the model.\r\n */\r\nexport interface ChatCompletionMessage {\r\n  /**\r\n   * The contents of the message.\r\n   */\r\n  content: string | null;\r\n\r\n  /**\r\n   * The role of the author of this message.\r\n   */\r\n  role: 'assistant';\r\n\r\n  /**\r\n   * A list of tools that were executed during the chat completion for compound AI\r\n   * systems.\r\n   */\r\n  executed_tools?: Array<ChatCompletionMessage.ExecutedTool>;\r\n\r\n  /**\r\n   * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\r\n   * function that should be called, as generated by the model.\r\n   */\r\n  function_call?: ChatCompletionMessage.FunctionCall;\r\n\r\n  /**\r\n   * The model's reasoning for a response. Only available for reasoning models when\r\n   * requests parameter reasoning_format has value `parsed.\r\n   */\r\n  reasoning?: string | null;\r\n\r\n  /**\r\n   * The tool calls generated by the model, such as function calls.\r\n   */\r\n  tool_calls?: Array<ChatCompletionMessageToolCall>;\r\n}\r\n\r\nexport namespace ChatCompletionMessage {\r\n  export interface ExecutedTool {\r\n    /**\r\n     * The arguments passed to the tool in JSON format.\r\n     */\r\n    arguments: string;\r\n\r\n    /**\r\n     * The index of the executed tool.\r\n     */\r\n    index: number;\r\n\r\n    /**\r\n     * The type of tool that was executed.\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * The output returned by the tool.\r\n     */\r\n    output?: string | null;\r\n  }\r\n\r\n  /**\r\n   * @deprecated Deprecated and replaced by `tool_calls`. The name and arguments of a\r\n   * function that should be called, as generated by the model.\r\n   */\r\n  export interface FunctionCall {\r\n    /**\r\n     * The arguments to call the function with, as generated by the model in JSON\r\n     * format. Note that the model does not always generate valid JSON, and may\r\n     * hallucinate parameters not defined by your function schema. Validate the\r\n     * arguments in your code before calling your function.\r\n     */\r\n    arguments: string;\r\n\r\n    /**\r\n     * The name of the function to call.\r\n     */\r\n    name: string;\r\n  }\r\n}\r\n\r\nexport type ChatCompletionMessageParam =\r\n  | ChatCompletionSystemMessageParam\r\n  | ChatCompletionUserMessageParam\r\n  | ChatCompletionAssistantMessageParam\r\n  | ChatCompletionToolMessageParam\r\n  | ChatCompletionFunctionMessageParam;\r\n\r\nexport interface ChatCompletionMessageToolCall {\r\n  /**\r\n   * The ID of the tool call.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The function that the model called.\r\n   */\r\n  function: ChatCompletionMessageToolCall.Function;\r\n\r\n  /**\r\n   * The type of the tool. Currently, only `function` is supported.\r\n   */\r\n  type: 'function';\r\n}\r\n\r\nexport namespace ChatCompletionMessageToolCall {\r\n  /**\r\n   * The function that the model called.\r\n   */\r\n  export interface Function {\r\n    /**\r\n     * The arguments to call the function with, as generated by the model in JSON\r\n     * format. Note that the model does not always generate valid JSON, and may\r\n     * hallucinate parameters not defined by your function schema. Validate the\r\n     * arguments in your code before calling your function.\r\n     */\r\n    arguments: string;\r\n\r\n    /**\r\n     * The name of the function to call.\r\n     */\r\n    name: string;\r\n  }\r\n}\r\n\r\n/**\r\n * Specifies a tool the model should use. Use to force the model to call a specific\r\n * function.\r\n */\r\nexport interface ChatCompletionNamedToolChoice {\r\n  function: ChatCompletionNamedToolChoice.Function;\r\n\r\n  /**\r\n   * The type of the tool. Currently, only `function` is supported.\r\n   */\r\n  type: 'function';\r\n}\r\n\r\nexport namespace ChatCompletionNamedToolChoice {\r\n  export interface Function {\r\n    /**\r\n     * The name of the function to call.\r\n     */\r\n    name: string;\r\n  }\r\n}\r\n\r\n/**\r\n * The role of the author of a message\r\n */\r\nexport type ChatCompletionRole = 'system' | 'user' | 'assistant' | 'tool' | 'function';\r\n\r\nexport interface ChatCompletionSystemMessageParam {\r\n  /**\r\n   * The contents of the system message.\r\n   */\r\n  content: string;\r\n\r\n  /**\r\n   * The role of the messages author, in this case `system`.\r\n   */\r\n  role: 'system';\r\n\r\n  /**\r\n   * An optional name for the participant. Provides the model information to\r\n   * differentiate between participants of the same role.\r\n   */\r\n  name?: string;\r\n}\r\n\r\nexport interface ChatCompletionTokenLogprob {\r\n  /**\r\n   * The token.\r\n   */\r\n  token: string;\r\n\r\n  /**\r\n   * A list of integers representing the UTF-8 bytes representation of the token.\r\n   * Useful in instances where characters are represented by multiple tokens and\r\n   * their byte representations must be combined to generate the correct text\r\n   * representation. Can be `null` if there is no bytes representation for the token.\r\n   */\r\n  bytes: Array<number> | null;\r\n\r\n  /**\r\n   * The log probability of this token, if it is within the top 20 most likely\r\n   * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very\r\n   * unlikely.\r\n   */\r\n  logprob: number;\r\n\r\n  /**\r\n   * List of the most likely tokens and their log probability, at this token\r\n   * position. In rare cases, there may be fewer than the number of requested\r\n   * `top_logprobs` returned.\r\n   */\r\n  top_logprobs: Array<ChatCompletionTokenLogprob.TopLogprob>;\r\n}\r\n\r\nexport namespace ChatCompletionTokenLogprob {\r\n  export interface TopLogprob {\r\n    /**\r\n     * The token.\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * A list of integers representing the UTF-8 bytes representation of the token.\r\n     * Useful in instances where characters are represented by multiple tokens and\r\n     * their byte representations must be combined to generate the correct text\r\n     * representation. Can be `null` if there is no bytes representation for the token.\r\n     */\r\n    bytes: Array<number> | null;\r\n\r\n    /**\r\n     * The log probability of this token, if it is within the top 20 most likely\r\n     * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very\r\n     * unlikely.\r\n     */\r\n    logprob: number;\r\n  }\r\n}\r\n\r\nexport interface ChatCompletionTool {\r\n  function: Shared.FunctionDefinition;\r\n\r\n  /**\r\n   * The type of the tool. Currently, only `function` is supported.\r\n   */\r\n  type: 'function';\r\n}\r\n\r\n/**\r\n * Controls which (if any) tool is called by the model. `none` means the model will\r\n * not call any tool and instead generates a message. `auto` means the model can\r\n * pick between generating a message or calling one or more tools. `required` means\r\n * the model must call one or more tools. Specifying a particular tool via\r\n * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\r\n * call that tool.\r\n *\r\n * `none` is the default when no tools are present. `auto` is the default if tools\r\n * are present.\r\n */\r\nexport type ChatCompletionToolChoiceOption = 'none' | 'auto' | 'required' | ChatCompletionNamedToolChoice;\r\n\r\nexport interface ChatCompletionToolMessageParam {\r\n  /**\r\n   * The contents of the tool message.\r\n   */\r\n  content: string;\r\n\r\n  /**\r\n   * The role of the messages author, in this case `tool`.\r\n   */\r\n  role: 'tool';\r\n\r\n  /**\r\n   * Tool call that this message is responding to.\r\n   */\r\n  tool_call_id: string;\r\n}\r\n\r\nexport interface ChatCompletionUserMessageParam {\r\n  /**\r\n   * The contents of the user message.\r\n   */\r\n  content: string | Array<ChatCompletionContentPart>;\r\n\r\n  /**\r\n   * The role of the messages author, in this case `user`.\r\n   */\r\n  role: 'user';\r\n\r\n  /**\r\n   * An optional name for the participant. Provides the model information to\r\n   * differentiate between participants of the same role.\r\n   */\r\n  name?: string;\r\n}\r\n\r\nexport type ChatCompletionCreateParams =\r\n  | ChatCompletionCreateParamsNonStreaming\r\n  | ChatCompletionCreateParamsStreaming;\r\n\r\nexport interface ChatCompletionCreateParamsBase {\r\n  /**\r\n   * A list of messages comprising the conversation so far.\r\n   */\r\n  messages: Array<ChatCompletionMessageParam>;\r\n\r\n  /**\r\n   * ID of the model to use. For details on which models are compatible with the Chat\r\n   * API, see available [models](https://console.groq.com/docs/models)\r\n   */\r\n  model:\r\n    | (string & {})\r\n    | 'gemma2-9b-it'\r\n    | 'llama-3.3-70b-versatile'\r\n    | 'llama-3.1-8b-instant'\r\n    | 'llama-guard-3-8b'\r\n    | 'llama3-70b-8192'\r\n    | 'llama3-8b-8192';\r\n\r\n  /**\r\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their\r\n   * existing frequency in the text so far, decreasing the model's likelihood to\r\n   * repeat the same line verbatim.\r\n   */\r\n  frequency_penalty?: number | null;\r\n\r\n  /**\r\n   * Deprecated in favor of `tool_choice`.\r\n   *\r\n   * Controls which (if any) function is called by the model. `none` means the model\r\n   * will not call a function and instead generates a message. `auto` means the model\r\n   * can pick between generating a message or calling a function. Specifying a\r\n   * particular function via `{\"name\": \"my_function\"}` forces the model to call that\r\n   * function.\r\n   *\r\n   * `none` is the default when no functions are present. `auto` is the default if\r\n   * functions are present.\r\n   */\r\n  function_call?: 'none' | 'auto' | 'required' | ChatCompletionFunctionCallOption | null;\r\n\r\n  /**\r\n   * Deprecated in favor of `tools`.\r\n   *\r\n   * A list of functions the model may generate JSON inputs for.\r\n   */\r\n  functions?: Array<CompletionCreateParams.Function> | null;\r\n\r\n  /**\r\n   * This is not yet supported by any of our models. Modify the likelihood of\r\n   * specified tokens appearing in the completion.\r\n   */\r\n  logit_bias?: Record<string, number> | null;\r\n\r\n  /**\r\n   * This is not yet supported by any of our models. Whether to return log\r\n   * probabilities of the output tokens or not. If true, returns the log\r\n   * probabilities of each output token returned in the `content` of `message`.\r\n   */\r\n  logprobs?: boolean | null;\r\n\r\n  /**\r\n   * The maximum number of tokens that can be generated in the chat completion. The\r\n   * total length of input tokens and generated tokens is limited by the model's\r\n   * context length.\r\n   */\r\n  max_completion_tokens?: number | null;\r\n\r\n  /**\r\n   * Deprecated in favor of `max_completion_tokens`. The maximum number of tokens\r\n   * that can be generated in the chat completion. The total length of input tokens\r\n   * and generated tokens is limited by the model's context length.\r\n   */\r\n  max_tokens?: number | null;\r\n\r\n  /**\r\n   * This parameter is not currently supported.\r\n   */\r\n  metadata?: Record<string, string> | null;\r\n\r\n  /**\r\n   * How many chat completion choices to generate for each input message. Note that\r\n   * the current moment, only n=1 is supported. Other values will result in a 400\r\n   * response.\r\n   */\r\n  n?: number | null;\r\n\r\n  /**\r\n   * Whether to enable parallel function calling during tool use.\r\n   */\r\n  parallel_tool_calls?: boolean | null;\r\n\r\n  /**\r\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on\r\n   * whether they appear in the text so far, increasing the model's likelihood to\r\n   * talk about new topics.\r\n   */\r\n  presence_penalty?: number | null;\r\n\r\n  /**\r\n   * Specifies how to output reasoning tokens\r\n   */\r\n  reasoning_format?: 'hidden' | 'raw' | 'parsed' | null;\r\n\r\n  /**\r\n   * An object specifying the format that the model must output.\r\n   *\r\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\r\n   * message the model generates is valid JSON.\r\n   *\r\n   * **Important:** when using JSON mode, you **must** also instruct the model to\r\n   * produce JSON yourself via a system or user message.\r\n   */\r\n  response_format?: CompletionCreateParams.ResponseFormat | null;\r\n\r\n  /**\r\n   * If specified, our system will make a best effort to sample deterministically,\r\n   * such that repeated requests with the same `seed` and parameters should return\r\n   * the same result. Determinism is not guaranteed, and you should refer to the\r\n   * `system_fingerprint` response parameter to monitor changes in the backend.\r\n   */\r\n  seed?: number | null;\r\n\r\n  /**\r\n   * The service tier to use for the request. Defaults to `on_demand`.\r\n   *\r\n   * - `auto` will automatically select the highest tier available within the rate\r\n   *   limits of your organization.\r\n   * - `flex` uses the flex tier, which will succeed or fail quickly.\r\n   */\r\n  service_tier?: 'auto' | 'on_demand' | 'flex' | null;\r\n\r\n  /**\r\n   * Up to 4 sequences where the API will stop generating further tokens. The\r\n   * returned text will not contain the stop sequence.\r\n   */\r\n  stop?: string | null | Array<string>;\r\n\r\n  /**\r\n   * This parameter is not currently supported.\r\n   */\r\n  store?: boolean | null;\r\n\r\n  /**\r\n   * If set, partial message deltas will be sent. Tokens will be sent as data-only\r\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\r\n   * as they become available, with the stream terminated by a `data: [DONE]`\r\n   * message. [Example code](/docs/text-chat#streaming-a-chat-completion).\r\n   */\r\n  stream?: boolean | null;\r\n\r\n  /**\r\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\r\n   * make the output more random, while lower values like 0.2 will make it more\r\n   * focused and deterministic. We generally recommend altering this or top_p but not\r\n   * both.\r\n   */\r\n  temperature?: number | null;\r\n\r\n  /**\r\n   * Controls which (if any) tool is called by the model. `none` means the model will\r\n   * not call any tool and instead generates a message. `auto` means the model can\r\n   * pick between generating a message or calling one or more tools. `required` means\r\n   * the model must call one or more tools. Specifying a particular tool via\r\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\r\n   * call that tool.\r\n   *\r\n   * `none` is the default when no tools are present. `auto` is the default if tools\r\n   * are present.\r\n   */\r\n  tool_choice?: ChatCompletionToolChoiceOption | null;\r\n\r\n  /**\r\n   * A list of tools the model may call. Currently, only functions are supported as a\r\n   * tool. Use this to provide a list of functions the model may generate JSON inputs\r\n   * for. A max of 128 functions are supported.\r\n   */\r\n  tools?: Array<ChatCompletionTool> | null;\r\n\r\n  /**\r\n   * This is not yet supported by any of our models. An integer between 0 and 20\r\n   * specifying the number of most likely tokens to return at each token position,\r\n   * each with an associated log probability. `logprobs` must be set to `true` if\r\n   * this parameter is used.\r\n   */\r\n  top_logprobs?: number | null;\r\n\r\n  /**\r\n   * An alternative to sampling with temperature, called nucleus sampling, where the\r\n   * model considers the results of the tokens with top_p probability mass. So 0.1\r\n   * means only the tokens comprising the top 10% probability mass are considered. We\r\n   * generally recommend altering this or temperature but not both.\r\n   */\r\n  top_p?: number | null;\r\n\r\n  /**\r\n   * A unique identifier representing your end-user, which can help us monitor and\r\n   * detect abuse.\r\n   */\r\n  user?: string | null;\r\n}\r\n\r\nexport namespace CompletionCreateParams {\r\n  /**\r\n   * @deprecated\r\n   */\r\n  export interface Function {\r\n    /**\r\n     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\r\n     * underscores and dashes, with a maximum length of 64.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * A description of what the function does, used by the model to choose when and\r\n     * how to call the function.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * The parameters the functions accepts, described as a JSON Schema object. See the\r\n     * docs on [tool use](/docs/tool-use) for examples, and the\r\n     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\r\n     * documentation about the format.\r\n     *\r\n     * Omitting `parameters` defines a function with an empty parameter list.\r\n     */\r\n    parameters?: Shared.FunctionParameters;\r\n  }\r\n\r\n  /**\r\n   * An object specifying the format that the model must output.\r\n   *\r\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\r\n   * message the model generates is valid JSON.\r\n   *\r\n   * **Important:** when using JSON mode, you **must** also instruct the model to\r\n   * produce JSON yourself via a system or user message.\r\n   */\r\n  export interface ResponseFormat {\r\n    /**\r\n     * Must be one of `text` or `json_object`.\r\n     */\r\n    type?: 'text' | 'json_object';\r\n  }\r\n}\r\n\r\nexport interface ChatCompletionCreateParamsNonStreaming extends ChatCompletionCreateParamsBase {\r\n  /**\r\n   * If set, partial message deltas will be sent. Tokens will be sent as data-only\r\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\r\n   * as they become available, with the stream terminated by a `data: [DONE]`\r\n   * message. [Example code](/docs/text-chat#streaming-a-chat-completion).\r\n   */\r\n  stream?: false | null;\r\n}\r\n\r\nexport interface ChatCompletionCreateParamsStreaming extends ChatCompletionCreateParamsBase {\r\n  /**\r\n   * If set, partial message deltas will be sent. Tokens will be sent as data-only\r\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\r\n   * as they become available, with the stream terminated by a `data: [DONE]`\r\n   * message. [Example code](/docs/text-chat#streaming-a-chat-completion).\r\n   */\r\n  stream: true;\r\n}\r\n\r\nexport declare namespace Completions {\r\n  export {\r\n    type ChatCompletion as ChatCompletion,\r\n    type ChatCompletionAssistantMessageParam as ChatCompletionAssistantMessageParam,\r\n    type ChatCompletionChunk as ChatCompletionChunk,\r\n    type ChatCompletionContentPart as ChatCompletionContentPart,\r\n    type ChatCompletionContentPartImage as ChatCompletionContentPartImage,\r\n    type ChatCompletionContentPartText as ChatCompletionContentPartText,\r\n    type ChatCompletionFunctionCallOption as ChatCompletionFunctionCallOption,\r\n    type ChatCompletionFunctionMessageParam as ChatCompletionFunctionMessageParam,\r\n    type ChatCompletionMessage as ChatCompletionMessage,\r\n    type ChatCompletionMessageParam as ChatCompletionMessageParam,\r\n    type ChatCompletionMessageToolCall as ChatCompletionMessageToolCall,\r\n    type ChatCompletionNamedToolChoice as ChatCompletionNamedToolChoice,\r\n    type ChatCompletionRole as ChatCompletionRole,\r\n    type ChatCompletionSystemMessageParam as ChatCompletionSystemMessageParam,\r\n    type ChatCompletionTokenLogprob as ChatCompletionTokenLogprob,\r\n    type ChatCompletionTool as ChatCompletionTool,\r\n    type ChatCompletionToolChoiceOption as ChatCompletionToolChoiceOption,\r\n    type ChatCompletionToolMessageParam as ChatCompletionToolMessageParam,\r\n    type ChatCompletionUserMessageParam as ChatCompletionUserMessageParam,\r\n    type CompletionCreateParams as CompletionCreateParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;AAOtB,OAAM,MAAOC,WAAY,SAAQD,WAAW;EAgB1CE,MAAMA,CACJC,IAAgC,EAChCC,OAA6B;IAE7B,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,6BAA6B,EAAE;MACtDH,IAAI;MACJ,GAAGC,OAAO;MACVG,MAAM,EAAEJ,IAAI,CAACI,MAAM,IAAI;KACxB,CAAmF;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}