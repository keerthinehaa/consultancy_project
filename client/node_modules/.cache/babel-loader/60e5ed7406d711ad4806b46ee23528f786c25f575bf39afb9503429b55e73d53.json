{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class Embeddings extends APIResource {\n  /**\r\n   * Creates an embedding vector representing the input text.\r\n   */\n  create(body, options) {\n    return this._client.post('/openai/v1/embeddings', {\n      body,\n      ...options\n    });\n  }\n}","map":{"version":3,"names":["APIResource","Embeddings","create","body","options","_client","post"],"sources":["D:\\consultancy_project\\consultancy_project\\client\\node_modules\\groq-sdk\\src\\resources\\embeddings.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../resource';\r\nimport * as Core from '../core';\r\n\r\nexport class Embeddings extends APIResource {\r\n  /**\r\n   * Creates an embedding vector representing the input text.\r\n   */\r\n  create(\r\n    body: EmbeddingCreateParams,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<CreateEmbeddingResponse> {\r\n    return this._client.post('/openai/v1/embeddings', { body, ...options });\r\n  }\r\n}\r\n\r\nexport interface CreateEmbeddingResponse {\r\n  /**\r\n   * The list of embeddings generated by the model.\r\n   */\r\n  data: Array<Embedding>;\r\n\r\n  /**\r\n   * The name of the model used to generate the embedding.\r\n   */\r\n  model: string;\r\n\r\n  /**\r\n   * The object type, which is always \"list\".\r\n   */\r\n  object: 'list';\r\n\r\n  /**\r\n   * The usage information for the request.\r\n   */\r\n  usage: CreateEmbeddingResponse.Usage;\r\n}\r\n\r\nexport namespace CreateEmbeddingResponse {\r\n  /**\r\n   * The usage information for the request.\r\n   */\r\n  export interface Usage {\r\n    /**\r\n     * The number of tokens used by the prompt.\r\n     */\r\n    prompt_tokens: number;\r\n\r\n    /**\r\n     * The total number of tokens used by the request.\r\n     */\r\n    total_tokens: number;\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an embedding vector returned by embedding endpoint.\r\n */\r\nexport interface Embedding {\r\n  /**\r\n   * The embedding vector, which is a list of floats. The length of vector depends on\r\n   * the model as listed in the [embedding guide](/docs/guides/embeddings).\r\n   */\r\n  embedding: Array<number> | string;\r\n\r\n  /**\r\n   * The index of the embedding in the list of embeddings.\r\n   */\r\n  index: number;\r\n\r\n  /**\r\n   * The object type, which is always \"embedding\".\r\n   */\r\n  object: 'embedding';\r\n}\r\n\r\nexport interface EmbeddingCreateParams {\r\n  /**\r\n   * Input text to embed, encoded as a string or array of tokens. To embed multiple\r\n   * inputs in a single request, pass an array of strings or array of token arrays.\r\n   * The input must not exceed the max input tokens for the model, cannot be an empty\r\n   * string, and any array must be 2048 dimensions or less.\r\n   */\r\n  input: string | Array<string>;\r\n\r\n  /**\r\n   * ID of the model to use.\r\n   */\r\n  model: (string & {}) | 'nomic-embed-text-v1_5';\r\n\r\n  /**\r\n   * The format to return the embeddings in. Can only be `float` or `base64`.\r\n   */\r\n  encoding_format?: 'float' | 'base64';\r\n\r\n  /**\r\n   * A unique identifier representing your end-user, which can help us monitor and\r\n   * detect abuse.\r\n   */\r\n  user?: string | null;\r\n}\r\n\r\nexport declare namespace Embeddings {\r\n  export {\r\n    type CreateEmbeddingResponse as CreateEmbeddingResponse,\r\n    type Embedding as Embedding,\r\n    type EmbeddingCreateParams as EmbeddingCreateParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;AAGtB,OAAM,MAAOC,UAAW,SAAQD,WAAW;EACzC;;;EAGAE,MAAMA,CACJC,IAA2B,EAC3BC,OAA6B;IAE7B,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,uBAAuB,EAAE;MAAEH,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}